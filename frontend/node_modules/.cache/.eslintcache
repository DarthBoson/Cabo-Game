[{"C:\\Users\\ASUS\\Documents\\Project Juhari v2\\frontend\\src\\index.js":"1","C:\\Users\\ASUS\\Documents\\Project Juhari v2\\frontend\\src\\App.js":"2","C:\\Users\\ASUS\\Documents\\Project Juhari v2\\frontend\\src\\components\\GameBoard.js":"3","C:\\Users\\ASUS\\Documents\\Project Juhari v2\\frontend\\src\\components\\Card.js":"4","C:\\Users\\ASUS\\Documents\\Project Juhari v2\\frontend\\src\\components\\Player.js":"5","C:\\Users\\ASUS\\Documents\\Project Juhari v2\\frontend\\src\\components\\GameLobby.js":"6","C:\\Users\\ASUS\\Documents\\Project Juhari v2\\frontend\\src\\components\\LoginPage.js":"7","C:\\Users\\ASUS\\Documents\\Project Juhari v2\\frontend\\src\\components\\WaitingLobby.js":"8","C:\\Users\\ASUS\\Documents\\Project Juhari v2\\frontend\\src\\components\\GameResults.js":"9"},{"size":273,"mtime":1719485461594,"results":"10","hashOfConfig":"11"},{"size":2466,"mtime":1719485700961,"results":"12","hashOfConfig":"11"},{"size":864,"mtime":1718045027283,"results":"13","hashOfConfig":"11"},{"size":171,"mtime":1718045048855,"results":"14","hashOfConfig":"11"},{"size":180,"mtime":1718045037683,"results":"15","hashOfConfig":"11"},{"size":8879,"mtime":1719517062885,"results":"16","hashOfConfig":"11"},{"size":950,"mtime":1718114705487,"results":"17","hashOfConfig":"11"},{"size":528,"mtime":1718305898873,"results":"18","hashOfConfig":"11"},{"size":1659,"mtime":1719512943549,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1tb6qiq",{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\Users\\ASUS\\Documents\\Project Juhari v2\\frontend\\src\\index.js",[],["41","42"],"C:\\Users\\ASUS\\Documents\\Project Juhari v2\\frontend\\src\\App.js",["43","44","45","46"],"import React, { useState, useEffect } from 'react';\r\nimport { Routes, Route, useNavigate } from 'react-router-dom';\r\nimport io from 'socket.io-client';\r\nimport LoginPage from './components/LoginPage';\r\nimport WaitingLobby from './components/WaitingLobby';\r\nimport GameLobby from './components/GameLobby';\r\nimport GameResults from './components/GameResults';\r\n\r\nconst socket = io('http://localhost:4000');\r\n\r\nfunction App() {\r\n  const [username, setUsername] = useState('');\r\n  const [profileImage, setProfileImage] = useState('');\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [isGameStarted, setIsGameStarted] = useState(false);\r\n  const [players, setPlayers] = useState([]);\r\n  const [card1Pile, setCard1Pile] = useState([]);\r\n  const [card2Pile, setCard2Pile] = useState([]);\r\n  const [currentTurn, setCurrentTurn] = useState(0);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    socket.on('gameUpdate', ({ players, card1Pile, card2Pile, currentTurn }) => {\r\n      setPlayers(players);\r\n      setCard1Pile(card1Pile);\r\n      setCard2Pile(card2Pile);\r\n      setCurrentTurn(currentTurn);\r\n    });\r\n\r\n    socket.on('gameStarted', ({ players, card1Pile, card2Pile, currentTurn }) => {\r\n      setPlayers(players);\r\n      setCard1Pile(card1Pile);\r\n      setCard2Pile(card2Pile);\r\n      setCurrentTurn(currentTurn);\r\n      setIsGameStarted(true);\r\n      navigate('/game');\r\n    });\r\n\r\n    return () => {\r\n      socket.off('gameUpdate');\r\n      socket.off('gameStarted');\r\n    };\r\n  }, [navigate]);\r\n\r\n  const handleLogin = (name, image) => {\r\n    setUsername(name);\r\n    setProfileImage(image);\r\n    setIsLoggedIn(true);\r\n    socket.emit('joinGame', { id: socket.id, name, profileImage: image });\r\n    navigate('/lobby');\r\n  };\r\n\r\n  const handleStartGame = () => {\r\n    socket.emit('startGame');\r\n  };\r\n\r\n  const handleNextTurn = () => {\r\n    socket.emit('nextTurn');\r\n  };\r\n\r\n  return (\r\n    <Routes>\r\n      <Route path=\"/\" element={<LoginPage onLogin={handleLogin} />} />\r\n      <Route path=\"/lobby\" element={<WaitingLobby players={players} onStartGame={handleStartGame} />} />\r\n      <Route path=\"/game\" element={\r\n        <GameLobby\r\n          players={players}\r\n          card1Pile={card1Pile}\r\n          card2Pile={card2Pile}\r\n          currentTurn={currentTurn}\r\n          onNextTurn={handleNextTurn}\r\n        />}\r\n      />\r\n      <Route path=\"/results\" element={<GameResults />} />\r\n    </Routes>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\ASUS\\Documents\\Project Juhari v2\\frontend\\src\\components\\GameBoard.js",[],"C:\\Users\\ASUS\\Documents\\Project Juhari v2\\frontend\\src\\components\\Card.js",[],"C:\\Users\\ASUS\\Documents\\Project Juhari v2\\frontend\\src\\components\\Player.js",[],"C:\\Users\\ASUS\\Documents\\Project Juhari v2\\frontend\\src\\components\\GameLobby.js",["47","48","49","50","51","52"],"import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport io from 'socket.io-client';\r\nimport './GameLobby.css';\r\n\r\nconst socket = io('http://localhost:4000');\r\n\r\nfunction GameLobby({ players, card1Pile, card2Pile, currentTurn, onNextTurn }) {\r\n  const [showPopup, setShowPopup] = useState(false);\r\n  const [topCard, setTopCard] = useState(null);\r\n  const [allowCardSelection, setAllowCardSelection] = useState(false);\r\n  const [allowCardSwap, setAllowCardSwap] = useState(false);\r\n  const [allowCardReplacement, setAllowCardReplacement] = useState(false);\r\n  const [selectedCards, setSelectedCards] = useState([]);\r\n  const [showCardValuePopup, setShowCardValuePopup] = useState(false);\r\n  const [selectedCardValue, setSelectedCardValue] = useState(null);\r\n  const [currentPlayer, setCurrentPlayer] = useState(null);\r\n  const [showCaboPopup, setShowCaboPopup] = useState(false);\r\n  const [caboCalled, setCaboCalled] = useState(false);\r\n  const [extraTurnsLeft, setExtraTurnsLeft] = useState(0);\r\n  const [swapFromPile2, setSwapFromPile2] = useState(false);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    setTopCard(card1Pile[card1Pile.length - 1]);\r\n  }, [card1Pile]);\r\n\r\n  useEffect(() => {\r\n    setCurrentPlayer(players[currentTurn]);\r\n  }, [currentTurn, players]);\r\n\r\n  useEffect(() => {\r\n    socket.on('allowCardSelection', ({ topCard }) => {\r\n      setTopCard(topCard);\r\n      setAllowCardSelection(true);\r\n    });\r\n\r\n    socket.on('allowCardSwap', ({ topCard }) => {\r\n      setTopCard(topCard);\r\n      setAllowCardSwap(true);\r\n    });\r\n\t\r\n\tsocket.on('allowCardSwapFromPile2', ({ topCard }) => {\r\n      setTopCard(topCard);\r\n      setSwapFromPile2(true);\r\n\t});\r\n\t\r\n    socket.on('gameEnded', (players) => {\r\n      navigate('/results', { state: { players } });\r\n    });\r\n\r\n    return () => {\r\n      socket.off('allowCardSelection');\r\n      socket.off('allowCardSwap');\r\n      socket.off('allowCardSwapFromPile2');\r\n      socket.off('gameEnded');\r\n    };\r\n  }, [navigate]);\r\n\r\n  const handleCardClick = () => {\r\n    if (card1Pile.length > 0) {\r\n      setTopCard(card1Pile[card1Pile.length - 1]);\r\n      setShowPopup(true);\r\n    }\r\n  };\r\n\r\n  const handleUsePower = () => {\r\n    const cardValue = topCard.slice(0, -1);\r\n    if (['7', '8', '9', '10'].includes(cardValue)) {\r\n      socket.emit('usePower');\r\n    } else if (['J', 'Q'].includes(cardValue)) {\r\n      socket.emit('usePower');\r\n    } else {\r\n      socket.emit('usePower');\r\n    }\r\n    setShowPopup(false);\r\n  };\r\n\r\n  const handleReplaceCard = () => {\r\n    setAllowCardReplacement(true);\r\n    setShowPopup(false);\r\n  };\r\n\r\n  const handleCardSelection = (cardValue, cardIndex, playerIndex) => {\r\n    if (allowCardSelection) {\r\n      setSelectedCardValue(cardValue);\r\n      setShowCardValuePopup(true);\r\n      setAllowCardSelection(false);\r\n      socket.emit('selectCard');\r\n    } else if (allowCardSwap) {\r\n      const selectedCard = { playerIndex, cardIndex };\r\n      const newSelectedCards = [...selectedCards, selectedCard];\r\n      setSelectedCards(newSelectedCards);\r\n\r\n      if (newSelectedCards.length === 2) {\r\n        socket.emit('swapCards', newSelectedCards[0], newSelectedCards[1]);\r\n        setSelectedCards([]);\r\n        setAllowCardSwap(false);\r\n      }\r\n    } else if (allowCardReplacement && playerIndex === currentTurn) {\r\n      socket.emit('replaceCard', playerIndex, cardIndex);\r\n      setAllowCardReplacement(false);\r\n    } else if (swapFromPile2 && playerIndex === currentTurn) {\r\n      socket.emit('replaceCardFromPile2', currentTurn, cardIndex);\r\n      setSwapFromPile2(false);\r\n    }\r\n  };\r\n\r\n  const closeCardValuePopup = () => {\r\n    setShowCardValuePopup(false);\r\n  };\r\n\r\n  const handleSwapFromPile2 = () => {\r\n    if (card2Pile.length > 0) {\r\n      socket.emit('useCardFromPile2');\r\n\t}\r\n  };\r\n\r\n  const swapCardFromPile2 = (playerIndex, cardIndex) => {\r\n    if (playerIndex !== null && card2Pile.length > 0) {\r\n      socket.emit('swapCardFromPile2', playerIndex, cardIndex);\r\n    }\r\n  };\r\n\r\n  const callCabo = () => {\r\n    socket.emit('callCabo');\r\n    setShowCaboPopup(true);\r\n    setCaboCalled(true);\r\n    setExtraTurnsLeft(players.length - 1);\r\n    setTimeout(() => {\r\n      setShowCaboPopup(false);\r\n    }, 5000);\r\n  };\r\n\r\n  const handleNextTurn = () => {\r\n    if (caboCalled) {\r\n      if (extraTurnsLeft > 0) {\r\n        setExtraTurnsLeft(extraTurnsLeft - 1);\r\n        onNextTurn();\r\n      } else {\r\n        socket.emit('endGame');\r\n      }\r\n    } else {\r\n      onNextTurn();\r\n    }\r\n  };\r\n\r\n  const renderPlayerSection = (player, index, position) => {\r\n    const isCurrentTurn = currentTurn === index;\r\n\r\n    return (\r\n      <div key={index} className={`player-section ${position}`}>\r\n        {position === 'bottom' && (\r\n          <div className=\"player-hand\">\r\n            {player.cards.map((card, cardIndex) => (\r\n              <div\r\n                key={cardIndex}\r\n                className={`card ${allowCardSelection || allowCardSwap || (allowCardReplacement && index === currentTurn) || (swapFromPile2 && index === currentTurn) ? 'selectable' : ''}`}\r\n                onClick={() => (allowCardSelection || allowCardSwap || (allowCardReplacement && index === currentTurn)) || (swapFromPile2 && index === currentTurn) && handleCardSelection(card, cardIndex, index)}\r\n                style={{ cursor: allowCardSelection || allowCardSwap || (allowCardReplacement && index === currentTurn) || (swapFromPile2 && index === currentTurn) ? 'pointer' : 'default' }}\r\n              >\r\n                {card}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n        <div className={`player-card ${isCurrentTurn ? 'current-turn' : ''}`}>\r\n          <img src={player.profileImage} alt={`${player.name}'s profile`} />\r\n          <h3>{player.name}</h3>\r\n        </div>\r\n        {position === 'top' && (\r\n          <div className=\"player-hand\">\r\n            {player.cards.map((card, cardIndex) => (\r\n              <div\r\n                key={cardIndex}\r\n                className={`card ${allowCardSelection || allowCardSwap || (allowCardReplacement && index === currentTurn) || (swapFromPile2 && index === currentTurn) ? 'selectable' : ''}`}\r\n                onClick={() => (allowCardSelection || allowCardSwap || (allowCardReplacement && index === currentTurn)) || (swapFromPile2 && index === currentTurn) && handleCardSelection(card, cardIndex, index)}\r\n                style={{ cursor: allowCardSelection || allowCardSwap || (allowCardReplacement && index === currentTurn) || (swapFromPile2 && index === currentTurn) ? 'pointer' : 'default' }}\r\n              >\r\n                {card}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-lobby\">\r\n      <h2>Game Lobby</h2>\r\n      <div className=\"game-content\">\r\n        <div className=\"sidebar\">\r\n          <div className=\"sidebar-cards\">\r\n            <div className=\"sidebar-card\" onClick={handleCardClick}>\r\n              Remaining: {card1Pile.length} cards\r\n            </div>\r\n            <div className=\"sidebar-card\" onClick={handleSwapFromPile2}>\r\n              {card2Pile.length > 0 ? `Card 2: ${card2Pile[card2Pile.length - 1]}` : 'Card 2'}\r\n            </div>\r\n          </div>\r\n          <div className=\"sidebar-buttons\">\r\n            <button>Button 1</button>\r\n            <button onClick={callCabo}>Call Cabo</button>\r\n            <button onClick={handleSwapFromPile2}>Swap Card from Pile 2</button>\r\n            <button onClick={handleNextTurn}>Next Turn</button>\r\n          </div>\r\n        </div>\r\n        <div className=\"game-board\">\r\n          <div className=\"row top-row\">\r\n            {players.slice(0, 4).map((player, index) => renderPlayerSection(player, index, 'top'))}\r\n          </div>\r\n          <div className=\"row bottom-row\">\r\n            {players.slice(4, 8).map((player, index) => renderPlayerSection(player, index + 4, 'bottom'))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {showPopup && (\r\n        <div className=\"popup\">\r\n          <div className=\"popup-content\">\r\n            <h3>Top Card: {topCard}</h3>\r\n            <button onClick={handleUsePower}>Use Power</button>\r\n            <button onClick={handleReplaceCard}>Replace Card</button>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {showCardValuePopup && (\r\n        <div className=\"popup\">\r\n          <div className=\"popup-content\">\r\n            <h3>Selected Card Value: {selectedCardValue}</h3>\r\n            <button onClick={closeCardValuePopup}>Close</button>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {showCaboPopup && (\r\n        <div className=\"popup\">\r\n          <div className=\"popup-content\">\r\n            <h3>The current player has called Cabo!</h3>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameLobby;\r\n","C:\\Users\\ASUS\\Documents\\Project Juhari v2\\frontend\\src\\components\\LoginPage.js",[],"C:\\Users\\ASUS\\Documents\\Project Juhari v2\\frontend\\src\\components\\WaitingLobby.js",[],"C:\\Users\\ASUS\\Documents\\Project Juhari v2\\frontend\\src\\components\\GameResults.js",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":12,"column":10,"nodeType":"59","messageId":"60","endLine":12,"endColumn":18},{"ruleId":"57","severity":1,"message":"61","line":13,"column":10,"nodeType":"59","messageId":"60","endLine":13,"endColumn":22},{"ruleId":"57","severity":1,"message":"62","line":14,"column":10,"nodeType":"59","messageId":"60","endLine":14,"endColumn":20},{"ruleId":"57","severity":1,"message":"63","line":15,"column":10,"nodeType":"59","messageId":"60","endLine":15,"endColumn":23},{"ruleId":"57","severity":1,"message":"64","line":17,"column":10,"nodeType":"59","messageId":"60","endLine":17,"endColumn":23},{"ruleId":"57","severity":1,"message":"65","line":120,"column":9,"nodeType":"59","messageId":"60","endLine":120,"endColumn":26},{"ruleId":"66","severity":1,"message":"67","line":160,"column":121,"nodeType":"68","messageId":"69","endLine":160,"endColumn":123},{"ruleId":"66","severity":1,"message":"67","line":160,"column":165,"nodeType":"68","messageId":"69","endLine":160,"endColumn":167},{"ruleId":"66","severity":1,"message":"67","line":178,"column":121,"nodeType":"68","messageId":"69","endLine":178,"endColumn":123},{"ruleId":"66","severity":1,"message":"67","line":178,"column":165,"nodeType":"68","messageId":"69","endLine":178,"endColumn":167},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"no-unused-vars","'username' is assigned a value but never used.","Identifier","unusedVar","'profileImage' is assigned a value but never used.","'isLoggedIn' is assigned a value but never used.","'isGameStarted' is assigned a value but never used.","'currentPlayer' is assigned a value but never used.","'swapCardFromPile2' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","no-global-assign","no-unsafe-negation"]